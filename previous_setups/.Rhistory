myfiles <- lapply(csv_files, read.delim)
#-------------------------------------------------------------------------------
#Dominik Loesung
volume_all <- lapply(myfiles, function(y)
apply(y, 1, FUN=function(x) as.numeric(x[9]) * pi * as.numeric(x[5]) + (2 * as.numeric(x[6]) + as.numeric(x[8]) + 0.5^0.5 * as.numeric(x[5]) * pi * as.numeric(x[7])^2 + as.numeric(x[10]) * pi * as.numeric(x[6])^2)))
mean_volume_all <- lapply(volume_all, mean)
print(mean_volume_all)
#wie als csv exportieren?
#liste zu dataframe konvertieren
df_mean_volume <- as.data.frame(do.call(rbind, mean_volume_all))
#Spalte umbenennen
names(df_mean_volume)[1] <- 'mean_volume'
#exportieren
write.csv(df_mean_volume,file = "meanvolume.csv" ,row.names=FALSE)
#tree output datein einlesen und in Liste konvertieren
csv_files = list.files(path = 'TreeOutput/', pattern = "csv$", full.names = TRUE)
myfiles <- lapply(csv_files, read.delim)
#-------------------------------------------------------------------------------
#Dominik Loesung
volume_all <- lapply(myfiles, function(y)
apply(y, 1, FUN=function(x) as.numeric(x[9]) * pi * as.numeric(x[5]) + (2 * as.numeric(x[6]) + as.numeric(x[8]) + 0.5^0.5 * as.numeric(x[5]) * pi * as.numeric(x[7])^2 + as.numeric(x[10]) * pi * as.numeric(x[6])^2)))
mean_volume_all <- lapply(volume_all, mean)
#wie als csv exportieren?
#liste zu dataframe konvertieren
df_mean_volume <- as.data.frame(do.call(rbind, mean_volume_all))
#Spalte umbenennen
names(df_mean_volume)[1] <- 'mean_volume'
#exportieren
write.csv(df_mean_volume,file = "meanvolume.csv" ,row.names=FALSE)
#this code calculates the biomass of mangrove trees based on the excel output of pyManga
#Emma Bouzanne, 07/06/2023
#tree output dateien einlesen und in Liste konvertieren
csv_files = list.files(path = 'TreeOutput/', pattern = "csv$", full.names = TRUE)
myfiles <- lapply(csv_files, read.delim)
#-------------------------------------------------------------------------------
#Dominik Loesung
volume_all <- lapply(myfiles, function(y)
apply(y, 1, FUN=function(x) as.numeric(x[9]) * pi * as.numeric(x[5]) + (2 * as.numeric(x[6]) + as.numeric(x[8]) + 0.5^0.5 * as.numeric(x[5]) * pi * as.numeric(x[7])^2 + as.numeric(x[10]) * pi * as.numeric(x[6])^2)))
mean_volume_all <- lapply(volume_all, mean)
#wie als csv exportieren?
#liste zu dataframe konvertieren
df_mean_volume <- as.data.frame(do.call(rbind, mean_volume_all))
#Spalte umbenennen
names(df_mean_volume)[1] <- 'mean_volume'
#exportieren
write.csv(df_mean_volume,file = "meanvolume.csv" ,row.names=FALSE, coloumn.names=FALSE)
View(df_mean_volume)
#exportieren
write.csv(df_mean_volume,file = "meanvolume.csv" ,row.names=TRUE)
#exportieren
write.csv(df_mean_volume,file = "meanvolume.csv" ,row.names=FALSE)
write.csv(df_mean_volume,file = "meanvolume.csv" ,row.names=FALSE)
?col.names
?colnames
write.csv(df_mean_volume,file = "meanvolume.csv" ,row.names=FALSE, colnames=TRUE)
write.csv(df_mean_volume,file = "meanvolume.csv" ,row.names=FALSE, col.names=FALSE)
write.table(df_mean_volume,file = "meanvolume.csv" ,row.names=FALSE, col.names=FALSE)
#this code calculates the biomass of mangrove trees based on the excel output of pyManga
#Emma Bouzanne, 07/06/2023
#tree output dateien einlesen und in Liste konvertieren
csv_files = list.files(path = 'TreeOutput/', pattern = "csv$", full.names = TRUE)
myfiles <- lapply(csv_files, read.delim)
#-------------------------------------------------------------------------------
#Dominik Loesung
volume_all <- lapply(myfiles, function(y)
apply(y, 1, FUN=function(x) as.numeric(x[9]) * pi * as.numeric(x[5]) + (2 * as.numeric(x[6]) + as.numeric(x[8]) + 0.5^0.5 * as.numeric(x[5]) * pi * as.numeric(x[7])^2 + as.numeric(x[10]) * pi * as.numeric(x[6])^2)))
mean_volume_all <- lapply(volume_all, mean)
#wie als csv exportieren?
#liste zu dataframe konvertieren
df_mean_volume <- as.data.frame(do.call(rbind, mean_volume_all))
#Spalte umbenennen
names(df_mean_volume)[1] <- 'mean_volume'
write.table(df_mean_volume,file = "meanvolume.csv" ,row.names=FALSE, col.names=FALSE)
#this code calculates the biomass of mangrove trees based on the excel output of pyManga
#Emma Bouzanne, 07/06/2023
#tree output dateien einlesen und in Liste konvertieren
csv_files = list.files(path = 'TreeOutput/', pattern = "csv$", full.names = TRUE)
myfiles <- lapply(csv_files, read.delim)
#-------------------------------------------------------------------------------
#Dominik Loesung
volume_all <- lapply(myfiles, function(y)
apply(y, 1, FUN=function(x) as.numeric(x[9]) * pi * as.numeric(x[5]) + (2 * as.numeric(x[6]) + as.numeric(x[8]) + 0.5^0.5 * as.numeric(x[5]) * pi * as.numeric(x[7])^2 + as.numeric(x[10]) * pi * as.numeric(x[6])^2)))
mean_volume_all <- lapply(volume_all, mean)
#wie als csv exportieren?
#liste zu dataframe konvertieren
df_mean_volume <- as.data.frame(do.call(rbind, mean_volume_all))
#Spalte umbenennen
names(df_mean_volume)[1] <- 'mean_volume'
#exportieren
write.table(df_mean_volume,file = "meanvolume.csv" ,row.names=FALSE, col.names=FALSE)
View(df_mean_volume)
#this code calculates the biomass of mangrove trees based on the excel output of pyManga
#Emma Bouzanne, 07/06/2023
#tree output dateien einlesen und in Liste konvertieren
csv_files = list.files(path = 'TreeOutput/', pattern = "csv$", full.names = TRUE)
myfiles <- lapply(csv_files, read.delim)
#-------------------------------------------------------------------------------
#Dominik Loesung
volume_all <- lapply(myfiles, function(y)
apply(y, 1, FUN=function(x) as.numeric(x[9]) * pi * as.numeric(x[5]) + (2 * as.numeric(x[6]) + as.numeric(x[8]) + 0.5^0.5 * as.numeric(x[5]) * pi * as.numeric(x[7])^2 + as.numeric(x[10]) * pi * as.numeric(x[6])^2)))
mean_volume_all <- lapply(volume_all, mean)
#wie als csv exportieren?
#liste zu dataframe konvertieren
df_mean_volume <- as.data.frame(do.call(rbind, mean_volume_all))
#Spalte umbenennen
names(df_mean_volume)[1] <- 'mean_volume'
#exportieren
write.table(df_mean_volume,file = "meanvolume.csv" ,row.names=FALSE, col.names=FALSE)
#this code calculates the biomass of mangrove trees based on the excel output of pyManga
#Emma Bouzanne, 07/06/2023
#tree output dateien einlesen und in Liste konvertieren
csv_files = list.files(path = 'TreeOutput/', pattern = "csv$", full.names = TRUE)
myfiles <- lapply(csv_files, read.delim)
#-------------------------------------------------------------------------------
#Dominik Loesung
volume_all <- lapply(myfiles, function(y)
apply(y, 1, FUN=function(x) as.numeric(x[9]) * pi * as.numeric(x[5]) + (2 * as.numeric(x[6]) + as.numeric(x[8]) + 0.5^0.5 * as.numeric(x[5]) * pi * as.numeric(x[7])^2 + as.numeric(x[10]) * pi * as.numeric(x[6])^2)))
mean_volume_all <- lapply(volume_all, mean)
#wie als csv exportieren?
#liste zu dataframe konvertieren
df_mean_volume <- as.data.frame(do.call(rbind, mean_volume_all))
#Spalte umbenennen
names(df_mean_volume)[1] <- 'mean_volume'
#exportieren
write.table(df_mean_volume,file = "meanvolume.csv" ,row.names=FALSE, col.names=FALSE)
View(myfiles)
View(mean_volume_all)
library(tidyverse)
file_list <- list.files("previous_setups/model_output/",
full.names = TRUE,
recursive = TRUE,
pattern = ".csv"
)
file_list <- list.files("model_output/",
full.names = TRUE,
recursive = TRUE,
pattern = ".csv"
)
tree_files <- lapply(file_list, data.table::fread)
View(tree_files)
names(tree_files) <- file_list
tree_table <- data.table::rbindlist(tree_files, idcol = "file_id")
View(tree_table)
tree_table <- tree_table %>%
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)")) %>%
mutate(model_type = str_extract(file_id, "(?<=previous_setups/).*(?=/Population_t_)")) %>%
mutate(tree_composition = str_extract(file_id, "(?<=previous_setups/).*(?=/Population_t_)")) %>%
separate(tree, into = c("tree_species", "tree_id"), sep = "_") %>%
View(tree_table)
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)"))
View(tree_table)
View(tree_table)
tree_table <- data.table::rbindlist(tree_files, idcol = "file_id")
View(tree_table)
tree_table <- tree_table
tree_table <- tree_table
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)"))
library(data.table)
library(data.table)
library(data.table)
library('data.table')
library(data.table)
tree_table <- data.table::rbindlist(tree_files, idcol = "file_id")
tree_table <- tree_table
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)"))
tree_table
tree_table$file_id
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)"))
tree_table <- tree_table
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)"))
library(tidyverse)
library(data.table)
# list all csv files that are inside a folder and all subfolders ----------
# @Emma: change folder to model_output
file_list <- list.files("model_output/",
full.names = TRUE,
recursive = TRUE,
pattern = ".csv"
)
# Read all files in a list
tree_files <- lapply(file_list, data.table::fread)
# name each file in the list according to their names in the folder
names(tree_files) <- file_list
# bind all tables together and give them an ID column called file_id
tree_table <- data.table::rbindlist(tree_files, idcol = "file_id")
tree_table$file_id
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)"))
mutate(timestep = str_extract(tree_table$file_id, "(?<=t_).*(?=.0.csv)"))
tree_table %>%
# extract everything followed by after t_ and before .0.csv
# @Emma: but maybe you can remove this because there is already a time column that
# has this information
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)")) %>%
mutate(model_type = str_extract(file_id, "(?<=previous_setups/).*(?=/Population_t_)")) %>%
View(tree_table)
mutate(tree_composition = str_extract(file_id, "(?<=previous_setups/).*(?=/Population_t_)")) %>%
mutate(tree_composition = str_extract(file_id, "(?<=previous_setups/).*(?=/Population_t_)")) %>%
separate(tree, into = c("tree_species", "tree_id"), sep = "_") %>%
mutate(segment = case_when(
x <= 10 ~ 1,
x > 10 & x <= 20 ~ 2,
x > 20 & x <= 30 ~ 3,
x > 30 & x <= 40 ~ 4,
.default = 5
)) %>%
mutate(biomass = h_root * pi * r_root^2 + (2 * r_crown + h_stem + 0.5^0.5 * r_root)
* pi * r_stem^2 + h_crown * pi * r_crown^2)
tree_table %>%
# extract everything followed by after t_ and before .0.csv
# @Emma: but maybe you can remove this because there is already a time column that
# has this information
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)")) %>%
# extract everything followed by after previous_setups/ and before /FS_100
# @Emma: this is a dummy to extract the model type from the file name, you need
# to adjust this to your actual file structure
mutate(model_type = str_extract(file_id, "(?<=previous_setups/).*(?=/Population_t_)")) %>%
# @Emma: you need to do something similar for the tree_composition, this is just
# a placeholder
mutate(tree_composition = str_extract(file_id, "(?<=previous_setups/).*(?=/Population_t_)")) %>%
# separate the tree column into tree_species and tree_id
separate(tree, into = c("tree_species", "tree_id"), sep = "_") %>%
# add a segment column based on x-value
mutate(segment = case_when(
x <= 10 ~ 1,
x > 10 & x <= 20 ~ 2,
x > 20 & x <= 30 ~ 3,
x > 30 & x <= 40 ~ 4,
.default = 5
)) %>%
# calculate the biomass of each tree
# @Emma: Adapt the formula and double check
mutate(biomass = h_root * pi * r_root^2 + (2 * r_crown + h_stem + 0.5^0.5 * r_root)
* pi * r_stem^2 + h_crown * pi * r_crown^2)
tree_summary <- tree_table %>%
group_by(time, tree_species, segment, model_type, tree_composition) %>%
summarise(
biomass = mean(biomass, na.rm = TRUE),
tree_height = mean(h_stem, na.rm = TRUE)
)
rlang::last_trace()
View(tree_files)
tree_table <- data.table::rbindlist(tree_files, idcol = "file_id")
tree_table %>%
# extract everything followed by after t_ and before .0.csv
# @Emma: but maybe you can remove this because there is already a time column that
# has this information
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)")) %>%
tree_table %>%
# extract everything followed by after t_ and before .0.csv
# @Emma: but maybe you can remove this because there is already a time column that
# has this information
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)")) %>%
# extract everything followed by after previous_setups/ and before /FS_100
# @Emma: this is a dummy to extract the model type from the file name, you need
# to adjust this to your actual file structure
mutate(model_type = str_extract(file_id, "(?<=previous_setups/).*(?=/Population_t_)")) %>%
# @Emma: you need to do something similar for the tree_composition, this is just
# a placeholder
mutate(tree_composition = str_extract(file_id, "(?<=previous_setups/).*(?=/Population_t_)")) %>%
# separate the tree column into tree_species and tree_id
separate(tree, into = c("tree_species", "tree_id"), sep = "_") %>%
# add a segment column based on x-value
mutate(segment = case_when(
x <= 10 ~ 1,
x > 10 & x <= 20 ~ 2,
x > 20 & x <= 30 ~ 3,
x > 30 & x <= 40 ~ 4,
.default = 5
)) %>%
# calculate the biomass of each tree
# @Emma: Adapt the formula and double check
mutate(biomass = h_root * pi * r_root^2 + (2 * r_crown + h_stem + 0.5^0.5 * r_root)
* pi * r_stem^2 + h_crown * pi * r_crown^2)
tree_table %>%
# extract everything followed by after t_ and before .0.csv
# @Emma: but maybe you can remove this because there is already a time column that
# has this information
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)")) %>%
# to adjust this to your actual file structure
mutate(model_type = str_extract(file_id, "(?<=previous_setups/).*(?=/Population_t_)")) %>%
# @Emma: you need to do something similar for the tree_composition, this is just
# a placeholder
mutate(tree_composition = str_extract(file_id, "(?<=previous_setups/).*(?=/Population_t_)")) %>%
# separate the tree column into tree_species and tree_id
separate(tree, into = c("tree_species", "tree_id"), sep = "_") %>%
mutate(segment = case_when(
x <= 10 ~ 1,
x > 10 & x <= 20 ~ 2,
x > 20 & x <= 30 ~ 3,
x > 30 & x <= 40 ~ 4,
.default = 5
)) %>%
# calculate the biomass of each tree
# @Emma: Adapt the formula and double check
mutate(biomass = h_root * pi * r_root^2 + (2 * r_crown + h_stem + 0.5^0.5 * r_root)
* pi * r_stem^2 + h_crown * pi * r_crown^2)
mutate(model_type = str_extract(file_id, "(?<=model_output/).*(?=/Population_t_)")) %>%
# @Emma: you need to do something similar for the tree_composition, this is just
# a placeholder
mutate(tree_composition = str_extract(file_id, "(?<=model_output/).*(?=/Population_t_)")) %>%
# separate the tree column into tree_species and tree_id
separate(tree, into = c("tree_species", "tree_id"), sep = "_") %>%
tree_summary <- tree_table %>%
group_by(time, tree_species, segment, model_type, tree_composition) %>%
summarise(
biomass = mean(biomass, na.rm = TRUE),
tree_height = mean(h_stem, na.rm = TRUE)
)
tree_summary <- tree_table %>%
group_by(time, tree_species, segment, model_type, tree_composition) %>%
summarise(
biomass = mean(biomass, na.rm = TRUE),
tree_height = mean(h_stem, na.rm = TRUE)
)
tree_summary <- tree_table %>%
group_by(time, tree_species, segment, model_type, tree_composition) %>%
summarise(
biomass = mean(biomass, na.rm = TRUE),
tree_height = mean(h_stem, na.rm = TRUE)
)
tree_table <- tree_table %>%
# extract everything followed by after t_ and before .0.csv
# @Emma: but maybe you can remove this because there is already a time column that
# has this information
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)")) %>%
tree_table <- tree_table %>%
# extract everything followed by after t_ and before .0.csv
# @Emma: but maybe you can remove this because there is already a time column that
# has this information
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)")) %>%
# extract everything followed by after previous_setups/ and before /FS_100
# @Emma: this is a dummy to extract the model type from the file name, you need
# to adjust this to your actual file structure
mutate(model_type = str_extract(file_id, "(?<=model_output/).*(?=/Population_t_)")) %>%
# @Emma: you need to do something similar for the tree_composition, this is just
# a placeholder
mutate(tree_composition = str_extract(file_id, "(?<=model_output/).*(?=/Population_t_)")) %>%
# separate the tree column into tree_species and tree_id
separate(tree, into = c("tree_species", "tree_id"), sep = "_") %>%
# add a segment column based on x-value
mutate(segment = case_when(
x <= 10 ~ 1,
x > 10 & x <= 20 ~ 2,
x > 20 & x <= 30 ~ 3,
x > 30 & x <= 40 ~ 4,
.default = 5
)) %>%
# calculate the biomass of each tree
# @Emma: Adapt the formula and double check
mutate(biomass = h_root * pi * r_root^2 + (2 * r_crown + h_stem + 0.5^0.5 * r_root)
* pi * r_stem^2 + h_crown * pi * r_crown^2)
tree_table <- tree_table %>%
# extract everything followed by after t_ and before .0.csv
# @Emma: but maybe you can remove this because there is already a time column that
# has this information
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)")) %>%
tree_table <- tree_table %>%
# extract everything followed by after t_ and before .0.csv
# @Emma: but maybe you can remove this because there is already a time column that
# has this information
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)")) %>%
# extract everything followed by after previous_setups/ and before /FS_100
# @Emma: this is a dummy to extract the model type from the file name, you need
# to adjust this to your actual file structure
mutate(model_type = str_extract(file_id, "(?<=model_output/).*(?=/Population_t_)")) %>%
tree_table <- tree_table %>%
# extract everything followed by after t_ and before .0.csv
# @Emma: but maybe you can remove this because there is already a time column that
# has this information
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)")) %>%
# extract everything followed by after previous_setups/ and before /FS_100
# @Emma: this is a dummy to extract the model type from the file name, you need
# to adjust this to your actual file structure
mutate(model_type = str_extract(file_id, "(?<=model_output/).*(?=/Population_t_)")) %>%
# @Emma: you need to do something similar for the tree_composition, this is just
# a placeholder
mutate(tree_composition = str_extract(file_id, "(?<=model_output/).*(?=/Population_t_)")) %>%
# separate the tree column into tree_species and tree_id
separate(tree, into = c("tree_species", "tree_id"), sep = "_") %>%
mutate(segment = case_when(
x <= 10 ~ 1,
x > 10 & x <= 20 ~ 2,
x > 20 & x <= 30 ~ 3,
x > 30 & x <= 40 ~ 4,
.default = 5
)) %>%
# calculate the biomass of each tree
# @Emma: Adapt the formula and double check
mutate(biomass = h_root * pi * r_root^2 + (2 * r_crown + h_stem + 0.5^0.5 * r_root)
* pi * r_stem^2 + h_crown * pi * r_crown^2)
tree_summary <- tree_table %>%
group_by(time, tree_species, segment, model_type, tree_composition) %>%
summarise(
biomass = mean(biomass, na.rm = TRUE),
tree_height = mean(h_stem, na.rm = TRUE)
)
mutate(segment = case_when(
x <= 10 ~ 1,
x > 10 & x <= 20 ~ 2,
x > 20 & x <= 30 ~ 3,
x > 30 & x <= 40 ~ 4,
.default = 5
)) %>%
mutate(biomass = h_root * pi * r_root^2 + (2 * r_crown + h_stem + 0.5^0.5 * r_root)
* pi * r_stem^2 + h_crown * pi * r_crown^2)
tree_table <- tree_table %>%
# extract everything followed by after t_ and before .0.csv
# @Emma: but maybe you can remove this because there is already a time column that
# has this information
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)")) %>%
# extract everything followed by after previous_setups/ and before /FS_100
# @Emma: this is a dummy to extract the model type from the file name, you need
# to adjust this to your actual file structure
mutate(model_type = str_extract(file_id, "(?<=model_output/).*(?=/Population_t_)")) %>%
# @Emma: you need to do something similar for the tree_composition, this is just
# a placeholder
mutate(tree_composition = str_extract(file_id, "(?<=model_output/).*(?=/Population_t_)")) %>%
# separate the tree column into tree_species and tree_id
separate(tree, into = c("tree_species", "tree_id"), sep = "_") %>%
# add a segment column based on x-value
mutate(segment = case_when(
x <= 10 ~ 1,
x > 10 & x <= 20 ~ 2,
x > 20 & x <= 30 ~ 3,
x > 30 & x <= 40 ~ 4,
.default = 5
)) %>%
# calculate the biomass of each tree
# @Emma: Adapt the formula and double check
mutate(biomass = h_root * pi * r_root^2 + (2 * r_crown + h_stem + 0.5^0.5 * r_root)
* pi * r_stem^2 + h_crown * pi * r_crown^2)
# function to summarize the data per
# timestep, tree_species, segment, model_type and tree composition
tree_summary <- tree_table %>%
group_by(time, tree_species, segment, model_type, tree_composition) %>%
summarise(
biomass = mean(biomass, na.rm = TRUE),
tree_height = mean(h_stem, na.rm = TRUE)
)
View(tree_summary)
View(tree_summary)
library(tidyverse)
library(data.table)
file_list <- list.files("model_output/",
full.names = TRUE,
recursive = TRUE,
pattern = ".csv"
)
tree_files <- lapply(file_list, data.table::fread)
names(tree_files) <- file_list
# bind all tables together and give them an ID column called file_id
tree_table <- data.table::rbindlist(tree_files, idcol = "file_id")
View(tree_table)
file_list[complete.cases(file_list),]
tree_files[complete.cases(tree_files),]
tree_table[complete.cases(tree_table),]
tree_table <- data.table::rbindlist(tree_files, idcol = "file_id")
tree_table <- tree_table %>%
# extract everything followed by after t_ and before .0.csv
# @Emma: but maybe you can remove this because there is already a time column that
# has this information
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)"))
tree_table <- tree_table %>%
# extract everything followed by after t_ and before .0.csv
# @Emma: but maybe you can remove this because there is already a time column that
# has this information
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)")) %>%
# extract everything followed by after previous_setups/ and before /FS_100
# @Emma: this is a dummy to extract the model type from the file name, you need
# to adjust this to your actual file structure
#wie kann ich hier extracten ab _1 bzw _2 bzw _3??
mutate(model_type = str_extract(file_id, "(?<=model_output//).*(?=_*_*/Population_t_)"))
tree_table <- tree_table %>%
# extract everything followed by after t_ and before .0.csv
# @Emma: but maybe you can remove this because there is already a time column that
# has this information
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)")) %>%
# extract everything followed by after previous_setups/ and before /FS_100
# @Emma: this is a dummy to extract the model type from the file name, you need
# to adjust this to your actual file structure
#wie kann ich hier extracten ab _1 bzw _2 bzw _3??
mutate(model_type = str_extract(file_id, "(?<=model_output//).*(?=_*_*/Population_t_)")) %>%
# @Emma: you need to do something similar for the tree_composition, this is just
# a placeholder
mutate(tree_composition = str_extract(file_id, "(?<=model_output//_*).*(?=_*/Population_t_)"))
tree_table <- tree_table %>%
# extract everything followed by after t_ and before .0.csv
# @Emma: but maybe you can remove this because there is already a time column that
# has this information
mutate(timestep = str_extract(file_id, "(?<=t_).*(?=.0.csv)")) %>%
# extract everything followed by after previous_setups/ and before /FS_100
# @Emma: this is a dummy to extract the model type from the file name, you need
# to adjust this to your actual file structure
#wie kann ich hier extracten ab _1 bzw _2 bzw _3??
mutate(model_type = str_extract(file_id, "(?<=model_output//).*(?=_*_*/Population_t_)")) %>%
# @Emma: you need to do something similar for the tree_composition, this is just
# a placeholder
mutate(tree_composition = str_extract(file_id, "(?<=model_output//).*(?=_*/Population_t_)"))
foo[foo==""] <- NA
foo[tree_files==""] <- NA
tree_files[tree_files==""] <- NA
tree_files <- na.omit(tree_files)
tree_files_1 <- na.omit(tree_files)
library("tidyr")
tree_files_1 <- tree_files %>% drop_na()
View(tree_files)
library(tidyr)
library(tidyr)
tree_files_1 <- tree_files %>% drop_na()
tree_table_1 <- tree_table %>% drop_na()
View(tree_table_1)
tree_table <- tree_table %>% drop_na()
